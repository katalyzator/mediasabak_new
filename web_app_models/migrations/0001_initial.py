# -*- coding: utf-8 -*-
# Generated by Django 1.11.4 on 2018-01-24 09:21
from __future__ import unicode_literals

import ckeditor_uploader.fields
import django.contrib.auth.models
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0008_alter_user_username_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Users',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=30, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='Email')),
                ('username', models.CharField(blank=True, max_length=255, null=True, verbose_name='Логин')),
                ('gender', models.CharField(choices=[('male', 'Мужчина'), ('female', 'Женщина')], max_length=255, null=True, verbose_name='Пол')),
                ('birth_date', models.DateField(null=True, verbose_name='Дата рождения')),
                ('phone', models.CharField(max_length=255, verbose_name='Номер телефона')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
            ],
            options={
                'abstract': False,
                'verbose_name_plural': 'users',
                'verbose_name': 'user',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Book',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Название книжки или методички')),
                ('preview', models.ImageField(null=True, upload_to='', verbose_name='Обложка книги или статьи')),
                ('description', models.TextField(max_length=400, null=True, verbose_name='Краткое описание книги')),
                ('file', models.FileField(upload_to='upload_files', verbose_name='Файл')),
            ],
            options={
                'verbose_name_plural': 'Книжки и методички',
                'verbose_name': 'Книжки и методички',
            },
        ),
        migrations.CreateModel(
            name='Exercise',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'verbose_name_plural': 'Упражнения',
                'verbose_name': 'Упражнение',
            },
        ),
        migrations.CreateModel(
            name='ExerciseAnswer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('answer', models.CharField(blank=True, max_length=255, null=True, verbose_name='Ответ')),
                ('answer_description', models.TextField(blank=True, help_text='Заполняйте это поле, только если ометили галочку правильный ответ', max_length=500, null=True, verbose_name='Пояснение ответа')),
                ('is_correct', models.BooleanField(default=False, verbose_name='Правильный ответ')),
            ],
            options={
                'verbose_name_plural': 'Ответы к упражнениям',
                'verbose_name': 'Ответы к упражнениям',
            },
        ),
        migrations.CreateModel(
            name='ExerciseQuestion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('default', 'Стандартный')], default='default', max_length=255, null=True, verbose_name='Тип вопроса')),
                ('name', models.CharField(blank=True, max_length=255, null=True, verbose_name='Вопрос')),
                ('image', models.ImageField(blank=True, null=True, upload_to='', verbose_name='Картинка вопроса')),
                ('video', models.CharField(blank=True, max_length=255, verbose_name='Видео вопроса')),
                ('exercise', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='web_app_models.Exercise', verbose_name='Упражнение')),
            ],
            options={
                'verbose_name_plural': 'Вопросы к упражнению',
                'verbose_name': 'Вопрос к упражнению',
            },
        ),
        migrations.CreateModel(
            name='ImageSlide',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Имя слайдера')),
                ('image', models.ImageField(upload_to='', verbose_name='Картинка слайдера')),
            ],
            options={
                'verbose_name_plural': 'Слайдеры',
                'verbose_name': 'Слайдер',
            },
        ),
        migrations.CreateModel(
            name='InterestingFacts',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='', verbose_name='Картинка')),
            ],
            options={
                'verbose_name_plural': 'Это интересно',
                'verbose_name': 'Это интересно',
            },
        ),
        migrations.CreateModel(
            name='Lesson',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, default=None, max_length=64, null=True)),
                ('image', models.ImageField(null=True, upload_to='', verbose_name='Превью')),
                ('video_key', models.CharField(help_text='Ключ видео после "v=" (Например https://www.youtube.com/watch?v=JGwWNGJdvx8&index=2&list=RDGMEMQ1dJ7wXfLlqCjwV0xfSNbAVMG2fOum_KWQU здесь ключем будет "JGwWNGJdvx8" )', max_length=255, null=True, verbose_name='Ключ видео на ютубе для мультфильма')),
                ('infographic_video_key', models.CharField(blank=True, help_text='Ключ видео после "v=" (Например https://www.youtube.com/watch?v=JGwWNGJdvx8&index=2&list=RDGMEMQ1dJ7wXfLlqCjwV0xfSNbAVMG2fOum_KWQU здесь ключем будет "JGwWNGJdvx8" )', max_length=255, null=True, verbose_name='Ключ видео на ютубе для инфографики')),
                ('pdf_file', models.FileField(blank=True, upload_to='', verbose_name='PDF файл')),
                ('word_file', models.FileField(blank=True, upload_to='', verbose_name='Word файл')),
            ],
            options={
                'verbose_name_plural': 'Уроки',
                'verbose_name': 'Урок',
            },
        ),
        migrations.CreateModel(
            name='Projects',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, verbose_name='Название работы')),
                ('preview', models.ImageField(upload_to='projects_preview/', verbose_name='Превью работы')),
                ('text', ckeditor_uploader.fields.RichTextUploadingField(verbose_name='Содрержание работы')),
                ('slug', models.SlugField(blank=True, null=True)),
            ],
            options={
                'verbose_name_plural': 'Работы',
                'verbose_name': 'Работа',
            },
        ),
        migrations.CreateModel(
            name='Slider',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='slider_image/', verbose_name='Картинка')),
                ('text', models.CharField(max_length=255, verbose_name='Текст на картинке')),
            ],
        ),
        migrations.CreateModel(
            name='Test',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lesson', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='test', to='web_app_models.Lesson', verbose_name='Урок')),
            ],
            options={
                'verbose_name_plural': 'Тесты',
                'verbose_name': 'Тест',
            },
        ),
        migrations.CreateModel(
            name='TestAnswer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('answer', models.CharField(blank=True, max_length=255, null=True, verbose_name='Ответ')),
                ('point', models.PositiveIntegerField(default=0, null=True, verbose_name='Баллы за этот ответ')),
                ('true_choice', models.CharField(blank=True, choices=[('1', 'Первый вариант ответа'), ('2', 'Второй вариант ответа')], help_text='Здесь вы выбираете вариант ответа который укзали ранее, только если вы выбрали типом вопросв "Сопоставление"', max_length=255, null=True, verbose_name='Относится к варианту')),
                ('is_correct', models.BooleanField(default=False, verbose_name='Правильный ответ')),
            ],
            options={
                'verbose_name_plural': 'Ответы к вопросам',
                'verbose_name': 'Ответ к вопросу',
            },
        ),
        migrations.CreateModel(
            name='TestQuestion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('default', 'Стандартный'), ('video', 'Видео'), ('input', 'Текстовый'), ('image', 'Тест с картинками'), ('juxtaposition', 'Сопоставление')], max_length=255, null=True, verbose_name='Тип вопроса')),
                ('name', models.CharField(blank=True, max_length=255, null=True, verbose_name='Вопрос')),
                ('image', models.ImageField(blank=True, null=True, upload_to='', verbose_name='Картинка вопроса')),
                ('video', models.CharField(blank=True, max_length=255, verbose_name='Видео вопроса')),
                ('first_association', models.CharField(blank=True, help_text='"Это поле заполняется только в случае если вариантом вопроса вы выбрали "Сопоставление", оно будет отображаться как один из возможных ответов', max_length=255, null=True, verbose_name='Первый вариант ответа')),
                ('second_association', models.CharField(blank=True, help_text='"Это поле заполняется только в случае если вариантом вопроса вы выбрали "Сопоставление", оно будет отображаться как один из возможных ответов', max_length=255, null=True, verbose_name='Второй вариант ответа')),
                ('test', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='test_question', to='web_app_models.Test', verbose_name='Относится к тесту')),
            ],
            options={
                'verbose_name_plural': 'Вопросы к тестам',
                'verbose_name': 'Вопрос к тесту',
            },
        ),
        migrations.AddField(
            model_name='testanswer',
            name='question',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='test_answer', to='web_app_models.TestQuestion'),
        ),
        migrations.AddField(
            model_name='interestingfacts',
            name='lesson',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='facts', to='web_app_models.Lesson', verbose_name='Относится к уроку'),
        ),
        migrations.AddField(
            model_name='imageslide',
            name='lesson',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='slider', to='web_app_models.Lesson'),
        ),
        migrations.AddField(
            model_name='exerciseanswer',
            name='question',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='exercise_answer', to='web_app_models.ExerciseQuestion', verbose_name='Ответ'),
        ),
        migrations.AddField(
            model_name='exercise',
            name='lesson',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='exercise_lesson', to='web_app_models.Lesson', verbose_name='Урок'),
        ),
        migrations.AddField(
            model_name='users',
            name='learned_lessons',
            field=models.ManyToManyField(to='web_app_models.Lesson', verbose_name='Пройденные тесты'),
        ),
        migrations.AddField(
            model_name='users',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
